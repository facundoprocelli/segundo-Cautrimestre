
#include <stdio.h>
#include <stdlib.h>
#include "string.h"



/*
1) nodoAuto * crearNodo (automovil auto).
Crea un nodo de tipo nodoAuto *.

2) void agregarFinal(nodoAuto * * lista, nodoAuto * nuevo).
Agrega un nuevo nodo al final de la lista (utilizando puntero doble)

3) int insertarCelda(automovil A [ ], int dim, automovil dato, int validos).
 Inserta el nuevo automóvil en el arreglo, de manera de conservarlo ordenado por valor
 en forma creciente. válidos es la cantidad de datos que tiene el arreglo y retorna validos+1.
  Al inicio validos vale 0.

4) void agregarMuchos(nodoAuto * * lista).
Esta función pide al usuario el ingreso de los datos de un automovil,
 crea un nodo y lo agrega al final de la lista (invocando a la función 2).



5) int pasar(nodoAuto * lista, automovil A[ ], int dim).
Esta función pasa el contenido de la lista al arreglo A, de forma de crear un arreglo ordenado. Para ello debe recorrer la lista e insertar los datos al arreglo usando la función 3.

6) void mostrarArregloRecursivo(automovil A[ ], int i, int pos).
Muestra el arreglo en forma recursiva, desde la posición cero hasta la posición pos. El parámetro i representa la posición actual del arreglo a mostrar.

7) Hacer una función recursiva que sume el valor de los automóviles de la lista que tengan patente “par”. Además, deberá pensar una función que determine si la patente es par o no. (Aclaración: las patentes tienen el formato “AAA123”, piense cómo hará para evaluar si el componente numérico es par o impar).

8) Hacer una función main() para usar lo anterior.


*/

typedef struct
{
    char patente[7];
    int valor;
    char marca[10];
} automovil;

typedef struct
{
    automovil dato;
    struct nodoAuto * siguiente;
} nodoAuto;

nodoAuto* iniclista();
automovil* cargarAuto();
nodoAuto* crearNodo(automovil* carro);
nodoAuto* buscarUltimo(nodoAuto* lista);



int main()
{
    nodoAuto* lista = iniclista();
    automovil A[10];


    agregarMuchos(&lista);

    int validos =  pasar(lista,A, 10);

    printf("\n\n Validos: %i \n\n");


    mostrarArregloRecursivo(A,0,validos);

    int patentesPar = sumarValorRecursivo(lista, 0);
    printf("\n\nValores: %i", patentesPar);

    return 0;
}


nodoAuto* iniclista()
{

    return NULL;
}



nodoAuto* crearNodo(automovil* carro)
{


    nodoAuto* aux = (nodoAuto*)malloc(sizeof(nodoAuto));


    aux->dato = *carro;

    aux->siguiente = NULL;

    return aux;
}


void mostrarLista(nodoAuto* lista)
{

    nodoAuto* aux = lista;

    while (aux != NULL)
    {

        mostrarNodo(aux);
        aux = aux->siguiente;

    }
}




void mostrarNodo(nodoAuto* lista)
{

    printf("\n\n------------Nodo-------------------\n");


    printf("\nMarca: %s", lista->dato.marca);
    printf("\nprecio: %i", lista->dato.valor);
    printf("\nPatente: %s", lista->dato.patente);


}

automovil* cargarAuto()
{

    automovil* carro = (automovil*)malloc(sizeof(automovil));



    printf("\nIngrese la marca: ");
    fflush(stdin);
    gets(carro->marca);

    printf("\nIngrese el valor: ");
    fflush(stdin);
    scanf("%i", &carro->valor);

    printf("\nIngrese la patente: ");
    fflush(stdin);
    gets(carro->patente);



    return carro;
}






void agregarFinal(nodoAuto** lista, nodoAuto * NN)
{

    if (*lista == NULL)
    {

        *lista = NN;
    }

    else
    {

        nodoAuto* ultimo = buscarUltimo(*lista);
        ultimo->siguiente = NN;


    }

}



nodoAuto* buscarUltimo(nodoAuto* lista)
{

    nodoAuto* aux = lista;

    while (aux->siguiente != NULL)
    {

        aux = aux->siguiente;

    }



    return aux;
}








int insertarCelda(automovil A[], int dim, automovil dato, int validos)
{

    if (validos < dim)
    {

        int i = validos;

        while (i >= 0 && A[i-1].valor > dato.valor)
        {

            A[i] = A[i-1];
            i--;
        }


        A[i] = dato;

        validos++;
    }

    return validos;
}



int pasar(nodoAuto* lista, automovil A[ ], int dim)
{

    int validos = 0;
    int i = 0;

    nodoAuto* seg = lista;

    while ( seg != NULL && i < dim)
    {
        validos = insertarCelda(A, dim, seg->dato, validos);
        seg = seg->siguiente;

    }


    return validos;
}



void agregarMuchos(nodoAuto** lista)
{

    int dato = 1;


    while (dato == 1)
    {
        printf("\npase\n");
        automovil* carro = cargarAuto();
        nodoAuto* NN = crearNodo(carro);

        agregarFinal(lista, NN);


        printf("seguir = 1");
        fflush(stdin);
        scanf("%i", &dato);
    }

    printf("\nsali");
}





void mostrarArregloRecursivo(automovil A[], int i, int validos)
{

    if(i >= validos)
    {

    }

    else
    {


        mostrarAuto(A[i]);
        mostrarArregloRecursivo(A,i+1, validos);

    }

}




void mostrarArreglo(automovil A[], int validos)
{
    int i = 0;

    for (i= 0; i < validos; i++)
    {

        mostrarAuto(A[i]);
    }


}




void mostrarAuto(automovil lista)
{

    printf("\n\n------------Auto-------------------\n");

    printf("\nMarca: %s", lista.marca);
    printf("\nprecio: %i", lista.valor);
    printf("\nPatente: %s", lista.patente);


}

int sumarValorRecursivo(nodoAuto* lista, int total)
{


    if(lista == NULL)
    {
        //variable de corte
    }

    else
    {
        int i = conocerPar(lista);

        if (i == 1)
        {

            total = lista->dato.valor + sumarValorRecursivo(lista->siguiente, total); // llamado recursivo
        }                                                   //acercamiento al corte
    }

    return total;// retorno
}


int conocerPar(nodoAuto* lista)
{

    int resultado;

    if (lista!= NULL)
    {

        resultado = 0;

        if ((lista->dato.patente[5] - '0') %2 == 0)
        {

            resultado = 1;
        }

    }
    return resultado;
}










