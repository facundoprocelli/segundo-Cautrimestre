#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define maxCaracteresDescripcion 200
#define maxCaracteres 30
#define cantEstados 4

#define minDia 1
#define maxDia 31
#define maxMes 12
#define minAno 2023
#define maxAno 2030




//Estructura de tareas

typedef struct
{
    int dia;
    int mes;
    int ano;
} stFecha;

typedef struct
{
    char titulo[maxCaracteres];
    char descripcion[maxCaracteresDescripcion];
    stFecha fecha;
    char estado[maxCaracteres];
} stTarea;



//Cabecera
int validacionString(char string[maxCaracteres]);
int validacionNumeros(char str[100], int min, int max);


// Funcion main
int main()
{

    stTarea tarea;
stFecha fecha;
    cargarNuevaTarea(&tarea);


    return 0;
}

void cargarNuevaTarea(stTarea *tarea, stFecha *fecha){



cargarTitulo(tarea);
cargarDescripcion(tarea);

/*
printf("\nDia: ");
cargarFecha(tarea, fecha, minDia, maxDia);
printf("\nMes: ");
cargarFecha(tarea,fecha,  minDia, maxMes);
printf("\nAÃ±o: ");
cargarFecha(tarea,fecha,minAno, maxAno);
*/

cargarEstado(tarea);
mostrarTarea(tarea);


}


void cargarTitulo(stTarea* tarea)
{
    char titulo[maxCaracteres];
    printf("\nTitulo: ");

    fflush(stdin);
    gets(titulo);

    int valido = validacionString(titulo);

     if(valido == 0)
    {
        while (valido == 0)
        {
            printf("Ingrese un titulo valido\nTitulo: ");
            fflush(stdin);
            gets(titulo);

            valido = validacionString(titulo);
        }
    }
    strcpy(tarea->titulo, titulo);
}


void cargarDescripcion (stTarea* tarea)
{
    printf("\nDescripcion: ");
    fflush(stdin);
    gets(tarea->descripcion);


}




void tiposEstado(char estado[cantEstados][maxCaracteres])
{
    printf("\n");
    strcpy(estado[0], "Nueva\n");
    strcpy(estado[1], "Lista\n");
    strcpy(estado[2], "Terminada\n");
    strcpy(estado[3], "Abandonda\n");
}

void mostrarEstados(char estado[][maxCaracteres]){

for(int i = 0; i < 4; i++){
    printf("%s", estado[i]);
}

}


void  cargarEstado(stTarea* tarea)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    char estado[cantEstados][maxCaracteres];
    tiposEstado(estado);


    printf("Seleccione un numero asociado a un estado: ");
    mostrarEstados(estado);
    printf("\nEstado: ");

    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,1,cantEstados);

        if (operador >= 1 && operador <= cantEstados)
        {
            strcpy(tarea->estado,estado[operador - 1]);
            break;
        }
    }


}


void mostrarTarea(stTarea* tarea){


printf(".............................\n");
printf("Titulo: %s\n", tarea->titulo);
printf("Estado: %s\n", tarea->estado);
printf("Descripcion: %s\n", tarea->descripcion);
printf(".............................\n");




}















/*

void cargarFecha(stTarea* tarea, stFecha* fecha,int min, int max)
{
    int operador = -1;
    char strOpcion[maxCaracteres];

    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,min,max);

        if (operador > min && operador < max)
        {
            tarea->fecha.dia = operador;
            break;
        }
    }

}

*/

int validacionNumeros(char str[100], int min, int max)
{
    char *endptr;
    long num = strtol(str, &endptr, 10);
    int valido =0;
    int conv;

    conv = (int)num;
    if (*endptr == '\0' && conv >= min && conv <= max )
    {
        valido = 1;
    }
    else
    {
        while (valido == 0)
        {
            printf("Ingrese un numero valido\n NUMERO:");
            gets(str);
            num = strtol(str, &endptr, 10);
            conv = (int)num;
            if (*endptr == '\0' && conv >= min && conv <= max)
            {
                valido = 1;

            }
        }
    }
    conv = (int)num;
    return conv;
}


//Validacion de string
int validacionString(char string[maxCaracteres])
{

    int cantidadCaracteres = strlen(string);
    int i;
    for (i = 0; i < cantidadCaracteres; i++)
    {
        char caracter = string[i];
        if (isalpha(caracter) == 0)
        {
            return 0;
        }
    }
    return 1;
}
