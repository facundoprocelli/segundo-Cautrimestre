
/*
Un programa de gestión de tareas que permite al usuario agregar, eliminar y
completar tareas almacenadas en un archivo:

Desarrolla un programa en C que permita administrar una lista de tareas pendientes.
Utiliza una estructura para representar cada tarea, incluyendo su descripción,
fecha límite, estado, etc. El programa debe permitir al usuario agregar nuevas tareas,
eliminar tareas existentes y marcar tareas como completadas. Almacena las tareas en un
archivo para que los datos persistan entre ejecuciones del programa.



*/





#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

//Declaración de constante de archivo
#define archivoTareas "tareas.bin"


//DEcalracion de constatnes
#define maxCaracteresDescripcion 200
#define maxCaracteres 30
#define cantEstados 4
#define maxTareas 100

#define minDia 1
#define maxDia 31
#define maxMes 12
#define minAno 2023
#define maxAno 2030




//Estructuras de datos

typedef struct
{
    int dia;
    int mes;
    int ano;
} stFecha;

typedef struct
{
    char titulo[maxCaracteres];
    char descripcion[maxCaracteresDescripcion];
    stFecha fecha;
    char estado[maxCaracteres];
} stTarea;



//Validaciones
int validacionString(char string[maxCaracteres]);
int validacionNumeros(char str[100], int min, int max);
int validacionDuplicado(char nuevoTitulo[]);
//Cargar Tarea
void cargarNuevaTarea();
void cargarTitulo(stTarea* tarea);
void cargarDescripcion (stTarea* tarea);
void  cargarEstado(stTarea* tarea);
void cargarFechaDia(stTarea* tarea, stFecha* fecha);
void cargarFechaMes(stTarea* tarea, stFecha* fecha);
void cargarFechaAno(stTarea* tarea, stFecha* fecha);

//Modificar Tarea

void cambiarEstadoTarea();

//Mostrar datos
void mostrarArchivoTarea();
void mostrarTareaPorAtributo();
void mostrarOpcionesMenu();
void mostrarTitulosTareas();
void mostrarArregloTarea(stTarea arreglo[], int validos);
void tiposEstado(char estado[cantEstados][maxCaracteres]);
void mostrarEstados(char estado[][maxCaracteres]);
void mostrarTareaDia();
void mostrarTareaMes();
void mostrarTareaAno();
void mostrarParametrosBusqueda();

// Funcion main
int main()
{
    /*
        FILE * archi = fopen(archivoTareas, "wb");
        fclose(archi);
    */
    int opcion = -1;
    int opcionAux = 1;

    while (opcionAux == 1)
    {

        while (opcion < 1 || opcion > 3)
        {
            printf("\nIngrese un numero del menu\n");
            mostrarOpcionesMenu();
            printf("\n Opcion: ");
            fflush(stdin);
            scanf("%i", &opcion);
        }
//Switch para elegir que funcion hacer
        switch(opcion)
        {

        case 1:
            cargarNuevaTarea();
            break;

        case 2:
            mostrarTareaPorAtributo();
            break;

        case 3:
            cambiarEstadoTarea();
            break;
        }
        opcion = -1;

        printf("\n\n |1| CONTINUAR \n |2| SALIR");
        fflush(stdin);
        scanf("%i", &opcionAux);

        while (opcionAux < 1 || opcionAux >2)
        {
            printf("Ingrese un numero valido");
            fflush(stdin);
            scanf("%i", &opcionAux);



        }

    }




    return 0;
}

void mostrarOpcionesMenu()
{

    printf("\n|1| Agreagar nueva tarea");
    printf("\n|2| Buscar tarea");
    printf("\n|3| Cambiar estado de tarea");

}


//Modificar Estado de La Tarea

void cambiarEstadoTarea()
{

    char tituloBuscado[maxCaracteres];
    stTarea tarea;

    FILE *archi = fopen(archivoTareas, "rb+");

    printf("Ingrese el titulo de la tarea que quiere modificar");
    mostrarTitulosTareas();
    printf("\nTitulo: ");
    fflush(stdin);
    gets(tituloBuscado);



    int encontrado = 0;
    while (fread(&tarea, sizeof(stTarea), 1, archi) > 0)
    {
        if (strcmp(tituloBuscado, tarea.titulo) == 0)
        {
            encontrado = 1;
            printf("Tarea encontrada:\n");
            mostrarTarea(&tarea);

            printf("Seleccione el nuevo estado:\n");
            cargarEstado(&tarea);

            // Mover el puntero del archivo para actualizar la tarea
            long pos = ftell(archi) - sizeof(stTarea);
            fseek(archi, pos, SEEK_SET);

            // Escribir la tarea actualizada en el archivo
            fwrite(&tarea, sizeof(stTarea), 1, archi);

            break;
        }
    }

    if (!encontrado)
    {
        printf("No se encontro ninguna tarea con ese título.\n");
    }

    fclose(archi);
}

void mostrarTitulosTareas()
{

    stTarea tarea;


    FILE * archi = fopen(archivoTareas, "rb");

    printf("\n Lista de titulos");
    while (fread(&tarea, sizeof(stTarea), 1, archi) > 0)
    {


        printf("\n- %s", tarea.titulo);
    }
    printf("\n");


}


void mostrarArregloTarea(stTarea arreglo[], int validos)
{

    int i = 0;

    for ( i = 0; i < validos; i++)
    {

        mostrarTarea(arreglo[i]);
    }

}


// Cargar nueva nueva tarea
void cargarNuevaTarea()
{
    stTarea tarea;
    stFecha fecha;

    FILE *archi = fopen(archivoTareas, "ab");

    cargarTitulo(&tarea);
    cargarDescripcion(&tarea);
    cargarFechaDia(&tarea, &fecha);
    cargarFechaMes(&tarea, &fecha);
    cargarFechaAno(&tarea, &fecha);
    cargarEstado(&tarea);

    fwrite(&tarea, sizeof(stTarea), 1, archi);


    fclose(archi);
}


void cargarTitulo(stTarea* tarea)
{
    char titulo[maxCaracteres];
    printf("\nTitulo: ");

    fflush(stdin);
    gets(titulo);

    int valido = validacionString(titulo);
    int duplicado = validacionDuplicado(titulo);

    if(valido == 0 || duplicado == 0)
    {
        while (valido == 0 || duplicado == 0)
        {
            printf("Ingrese un titulo valido\nTitulo: ");
            fflush(stdin);
            gets(titulo);

            valido = validacionString(titulo);
            duplicado = validacionDuplicado(titulo);
        }
    }
    strcpy(tarea->titulo, titulo);
}


int validacionDuplicado(char nuevoTitulo[])
{

    stTarea tarea;

    FILE* archi = fopen(archivoTareas, "rb");

    while (fread(&tarea, sizeof(stTarea), 1, archi) > 0)
    {

        if (strcmp(tarea.titulo, nuevoTitulo) == 0)
        {

            return 0;
        }
    }
    return 1;



    fclose(archi);
}



void cargarDescripcion (stTarea* tarea)
{
    printf("\nDescripcion: ");
    fflush(stdin);
    gets(tarea->descripcion);


}


// Menues para seleccionar un estado en menu

void  cargarEstado(stTarea* tarea)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    char estado[cantEstados][maxCaracteres];
    tiposEstado(estado);


    printf("Seleccione un numero asociado a un estado: ");
    mostrarEstados(estado);
    printf("\nEstado: ");

    fflush(stdin);
    gets(strOpcion);


    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,1,cantEstados);

        if (operador >= 1 && operador <= cantEstados)
        {
            strcpy(tarea->estado,estado[operador - 1]);
            break;
        }
    }


}


void tiposEstado(char estado[cantEstados][maxCaracteres])
{
    printf("\n");
    strcpy(estado[0], "Nueva");
    strcpy(estado[1], "Lista");
    strcpy(estado[2], "Terminada");
    strcpy(estado[3], "Abandonda");
}

void mostrarEstados(char estado[][maxCaracteres])
{

    for(int i = 0; i < 4; i++)
    {
        printf("\n|%i| %s",i + 1, estado[i]);
    }

}



//Cargar estructura de fecha

void cargarFechaDia(stTarea* tarea, stFecha* fecha)
{
    int operador = -1;
    char strOpcion[maxCaracteres];
    printf("\nDia: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minDia,maxDia);

        if (operador >= minDia && operador <= maxDia)
        {
            tarea->fecha.dia = operador;
            break;
        }
    }

}

void cargarFechaMes(stTarea* tarea, stFecha* fecha)
{
    int operador = -1;
    char strOpcion[maxCaracteres];
    printf("\nMes: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minDia,maxMes);

        if (operador >= minDia && operador <= maxMes)
        {
            tarea->fecha.mes = operador;
            break;
        }
    }

}

void cargarFechaAno(stTarea* tarea, stFecha* fecha)
{
    int operador = -1;
    char strOpcion[maxCaracteres];
    printf("\nAno: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,minAno,maxAno);

        if (operador >= minAno && operador <= maxAno)
        {
            tarea->fecha.ano = operador;
            break;
        }
    }

}


// Mostrar tareas
void mostrarTareaPorAtributo()
{

    int opcion = -1;

    while (opcion <1 || opcion > 8)
    {
        printf("Ingrese un numero asociado a un parametro");
        mostrarParametrosBusqueda();
        printf("\nOpcion: ");
        fflush(stdin);
        scanf("%i", &opcion);
    }


    switch(opcion)
    {
    case 1:
        mostrarTareaDia();
        break;

    case 2:
        mostrarTareaMes();
        break;

    case 3:
        mostrarTareaAno();
        break;
    case 4:
        mostrarArchivoTarea();
        break;
    case 5:
        mostrarTareaLista();
        break;
    case 6:
        mostrarTareaNueva();
        break;
    case 7:
        mostrarTareaTerminadas();
        break;
    case 8:
        mostrarTareaAbandonada();
        break;

    }
    opcion = -1;
}

void mostrarTareaTerminadas()
{

    FILE * archi = fopen(archivoTareas, "rb");

    stTarea tarea;

    while (fread(&tarea, sizeof(stTarea), 1, archi) > 0)
    {


        if (strcmp(tarea.estado, "Terminada") == 0)
        {
            mostrarTarea(&tarea);
        }
    }
    fclose(archi);
}

void mostrarTareaNueva()
{

    FILE * archi = fopen(archivoTareas, "rb");

    stTarea tarea;

    while (fread(&tarea, sizeof(stTarea), 1, archi) > 0)
    {


        if (strcmp(tarea.estado, "Nueva") == 0)
        {
            mostrarTarea(&tarea);
        }
    }
    fclose(archi);

}

void mostrarTareaLista()
{
    FILE * archi = fopen(archivoTareas, "rb");

    stTarea tarea;

    while (fread(&tarea, sizeof(stTarea), 1, archi) > 0)
    {


        if (strcmp(tarea.estado, "Lista") == 0)
        {
            mostrarTarea(&tarea);
        }
    }
    fclose(archi);

}

void mostrarTareaAbandonada()
{
    FILE * archi = fopen(archivoTareas, "rb");

    stTarea tarea;

    while (fread(&tarea, sizeof(stTarea), 1, archi) > 0)
    {


        if (strcmp(tarea.estado, "Abandonada") == 0)
        {
            mostrarTarea(&tarea);
        }
    }
    fclose(archi);

}

void mostrarTareaDia()
{

    FILE *archi = fopen(archivoTareas, "rb");
    stTarea tarea;
    stFecha fecha;
    stTarea tareaAux;
    int i= 0;

    cargarFechaDia(&tareaAux, &fecha);

    while (fread(&tarea, sizeof(stTarea), 1, archi) > 0)
    {


        if (tareaAux.fecha.dia == tarea.fecha.dia)
        {

            mostrarTarea(&tarea);
            i++;
        }
    }
    if (i == 0)
    {
        printf("No hay ninguna tarea asignada ese dia");
    }

    fclose(archi);
}

void mostrarTareaMes()
{

    FILE *archi = fopen(archivoTareas, "rb");
    stTarea tarea;
    stFecha fecha;
    stTarea tareaAux;
    int i= 0;

    cargarFechaMes(&tareaAux, &fecha);

    while (fread(&tarea, sizeof(stTarea), 1, archi) > 0)
    {


        if (tareaAux.fecha.mes == tarea.fecha.mes)
        {

            mostrarTarea(&tarea);
            i++;
        }
    }
    if (i == 0)
    {
        printf("No hay ninguna tarea asignada en ese mes");
    }

    fclose(archi);
}

void mostrarTareaAno()
{

    FILE *archi = fopen(archivoTareas, "rb");
    stTarea tarea;
    stFecha fecha;
    stTarea tareaAux;
    int i= 0;

    cargarFechaAno(&tareaAux, &fecha);

    while (fread(&tarea, sizeof(stTarea), 1, archi) > 0)
    {


        if (tareaAux.fecha.ano == tarea.fecha.ano)
        {

            mostrarTarea(&tarea);
            i++;
        }
    }
    if (i == 0)
    {
        printf("No hay ninguna tarea asignada ese Año");
    }

    fclose(archi);
}

void mostrarTarea(stTarea* tarea)
{


    printf(".............................\n");
    printf("Fecha: %i / %i / %i \n", tarea->fecha.dia, tarea->fecha.mes, tarea->fecha.ano);
    printf("Titulo: %s\n", tarea->titulo);
    printf("Estado: %s\n", tarea->estado);
    printf("Descripcion: %s\n", tarea->descripcion);
    printf(".............................\n");

}

void mostrarArchivoTarea()
{

    FILE *archi = fopen(archivoTareas, "rb");
    stTarea tarea;


    while (fread(&tarea, sizeof(stTarea),1, archi) > 0)
    {

        mostrarTarea(&tarea);
    }

    fclose(archi);




}


void mostrarParametrosBusqueda()
{

    printf("\n|1| Buscar por Dia");
    printf("\n|2| Buscar por Mes");
    printf("\n|3| Buscar por Ano");
    printf("\n|4| Buscar todas las tareas");
    printf("\n|5| Buscar tareas Listas");
    printf("\n|6| Buscar tareas Nuevas");
    printf("\n|7| Buscar tareas Termiandas");
    printf("\n|8| Buscar tareas Abandonadas");



}


// Validacion de numeros

int validacionNumeros(char str[100], int min, int max)
{
    char *endptr; // Puntero para almacenar la posición después de la conversión
    long num = strtol(str, &endptr, 10); // Convertir la cadena a un número
    int valido =0; // controla la validacion
    int conv; // Almacenar la conversión a entero

    conv = (int)num; // Convertir el número long a entero

    // Verificar si la conversión fue exitosa y si el número está dentro del rango
    if (*endptr == '\0' && conv >= min && conv <= max )
    {
        valido = 1; // Marcar como válido
    }
    else
    {
        // Bucle para solicitar una entrada válida
        while (valido == 0)
        {
            printf("Ingrese un numero valido\n NUMERO:");
            gets(str); // Leer la entrada del usuario
            num = strtol(str, &endptr, 10); // Convertir la nueva cadena a número
            conv = (int)num; // Convertir el número long a entero

            // Verificar si la conversión fue exitosa y si el número está dentro del rango
            if (*endptr == '\0' && conv >= min && conv <= max)
            {
                valido = 1; // Marcar como válido
            }
        }
    }
    conv = (int)num; // Convertir el número long a entero
    return conv; // Devolver el valor convertido y validado
}

//Validacion de string
int validacionString(char string[maxCaracteres])
{
    // Calcula la cantidad de caracteres en la cadena
    int cantidadCaracteres = strlen(string);

    int i;
    // Recorre cada caracter en la cadena
    for (i = 0; i < cantidadCaracteres; i++)
    {
        char caracter = string[i]; // Obtén el caracter actual

        // Verifica si el caracter no es una letra (alfabético)
        if (isalpha(caracter) == 0)
        {
            return 0; // Si no es una letra, retorna 0 (no válido)
        }
    }
    return 1; // Si todos los caracteres son letras, retorna 1 (válido)
}






