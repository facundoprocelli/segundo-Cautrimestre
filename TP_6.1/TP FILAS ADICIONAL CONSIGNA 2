#include <stdlib.h>
#include <stdio.h>
#include <string.h>


typedef struct stPasajero
{
    int tipodeboleto; //1 común, 2 jubilado, 3 estudiante
    float recorridoEnMetrosEstimado;
    float precioBoleto;
    char DNI[11];
} stPasajero ;

typedef struct nodoPasajero
{
    stPasajero dato ;
    struct nodoPasajero* siguiente;
} nodoPasajero;

typedef struct {

    stPasajero dato;
    struct nodoDoble* sig;
    struct nodoDoble* ante;

}nodo2;

/*
Para gestionar la lista de pasajeros necesitaremos codificar

Agregar un pasajero a la lista doble ordenada por el recorrido estimado que piensa hacer.

Verificar si existe un pasajero por DNI

Eliminar un pasajero por el número de DNI.

Contar pasajeros por tipo de boleto enviado por parámetro.
*/

stPasajero cargarPasajero();
nodoPasajero* agregarPasajeros(nodoPasajero* lista);
nodoPasajero* agregarPpio(nodoPasajero* lista, nodoPasajero* NN);
nodoPasajero* iniclista();
nodoPasajero* crearNodo(stPasajero aux);

nodo2* pasarDeListaToDoble(nodo2* lista2, nodoPasajero* lista);
nodo2 * crearNodo2(stPasajero dato);
nodo2* agregarPpio2(nodo2* lista, nodo2* NN);
nodo2* agregarEnOrden(nodo2* lista, nodo2* NN);

nodo2* iniclista2()
{
return NULL;
}
    int main(){

nodoPasajero* listaPasajeros = iniclista();

listaPasajeros = agregarPasajeros(listaPasajeros);
//mostrarListaSimple(listaPasajeros);

nodo2* listaDoble = iniclista2();
listaDoble= pasarDeListaToDoble(listaDoble, listaPasajeros);


mostrarListaDoble(listaDoble);
return 0;
}

void mostrarListaSimple(nodoPasajero* lista){


while (lista != NULL){

    mostrarPasajero(lista->dato);
    lista = lista->siguiente;
}


}


void mostrarPasajero(stPasajero aux){

printf("\n==========================================");
printf("\nDNI...........: %s", aux.DNI);
printf("\nPrecio........: %.2f", aux.precioBoleto);
printf("\nRecorrido.....: %.2f", aux.recorridoEnMetrosEstimado);
printf("\nTipo..........: %i", aux.tipodeboleto);
printf("\n==========================================");

}

nodoPasajero* agregarPasajeros(nodoPasajero* lista){

char rta = 's';

while (rta == 's'){

    nodoPasajero* NN = crearNodo(cargarPasajero());

    lista = agregarPpio(lista, NN);


    printf("\n Para seguir presione 's' \n");
    fflush(stdin);
    scanf("%c", &rta);
}




return lista;
}

nodoPasajero* crearNodo(stPasajero aux){

nodoPasajero* nodo = (nodoPasajero*)malloc(sizeof(nodoPasajero));

nodo->dato = aux;
nodo->siguiente = iniclista();


return nodo;
}

nodoPasajero* agregarPpio(nodoPasajero* lista, nodoPasajero* NN){

if (lista == NULL){
    lista = NN;
}

else{

NN->siguiente = lista;
lista = NN;
}


return lista;
}

nodoPasajero* iniclista(){

return NULL;
}

stPasajero cargarPasajero(){

stPasajero aux;

printf("\nIngrese el DNI del pasajero: ");
fflush(stdin);
gets(aux.DNI);

printf("\n ingrese el precio del boleto: ");
fflush(stdin);
scanf("%f", &aux.precioBoleto);

printf("\n Ingrese la distancia: ");
fflush(stdin);
scanf("%f", &aux.recorridoEnMetrosEstimado);

printf("\n Ingrese el tipo de pasajero: ");
fflush(stdin);
scanf("%i", &aux.tipodeboleto);


return aux;


}

nodo2 * crearNodo2(stPasajero dato)
{


    nodo2 * nuevoNodo = (nodo2*)malloc(sizeof(nodo2));


    nuevoNodo->dato = dato ;

    nuevoNodo->sig = NULL;
    nuevoNodo->ante = NULL;
    return nuevoNodo;
}

nodo2* pasarDeListaToDoble(nodo2* lista2, nodoPasajero* lista){


while (lista != NULL){

    nodo2* NN = crearNodo2(lista->dato);

    lista2 = agregarEnOrden(lista2, NN);

    lista = lista->siguiente;


}




return lista2;
}

void mostrarListaDoble(nodo2* lista)
{

    nodo2* seg = lista; // trabajo con una copia para no moficar el original

    while (seg!= NULL)  // Mientras no este en el final
    {

        mostrarPasajero(seg->dato); // llamo a la funcion mostrar nodo
        seg = seg ->sig; // avanzo una posicion
    }
}


nodo2* agregarPpio2(nodo2* lista, nodo2* NN)
{


    NN->sig = lista; // Enlazo la salida de el nodo nuevo a lista
    //sirve para casos de NULL y de nodo Valido


    if ( lista!= NULL)  // si no es NULL
    {
        lista-> ante = NN; // anterior es == a nuevo nodo, enlazando la entrada
    }

    return NN;
}
//--------------------------------------------------------------------------------------



//agregar en orden
//--------------------------------------------------------------------------------------

nodo2* agregarEnOrden(nodo2* lista, nodo2* NN)
{

    nodo2* seg = iniclista2();
    nodo2* ante = iniclista2();
    if ( lista == NULL)
    {
        lista = NN;
    }

    else if(NN->dato.recorridoEnMetrosEstimado< lista->dato.recorridoEnMetrosEstimado)
    {
        lista = agregarPpio2 (lista, NN);
    }

    else
    {

        seg = lista->sig;

        ante = lista;

        while ((seg != NULL) && (seg->dato.recorridoEnMetrosEstimado< NN->dato.recorridoEnMetrosEstimado))
        {

            ante = seg;  // avanza una posicion ante
            seg = seg->sig; // avanza una posicion seg

        }

        NN->sig = seg; // Enlazo el nuevo nodo a seg, que es una posiicon mas grande
        NN->ante = ante; // Enlazo el nuevonodo ante, al ante que es una posicion menor

        ante->sig = NN;// conecto la vuelta de el siguinete a NN

        if(seg != NULL)  // Esta sentecia es para que no se romap cuando el NN es el ,mayor de todos
        {
            // Porque sino conectariamos el NODO a Nada y se rompe
            seg-> ante =NN; // conecto el ante de seguidor a la NN
        }
    }

    return lista;
}
